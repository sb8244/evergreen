This document is for the mongodb schema descriptors. It is mainly for brainstorming among programmers. The format is "X Collection:" followed by a list of the field names and descriptions.

User Collection:
	"_id" # given by mongodb
	"name" # User's name which is given by them. not used for login
	"email" # User's email which is used for login
	"password" # MD5 password used for login
	"room_list" # Array of room ids which the user has posted to. This is used for recalling past lists.

Example:

db.users.save( {
	name:"Stephen Bussey", 
	email:"sb8244@cs.ship.edu",
	password:"5f4dcc3b5aa765d61d8327deb882cf99",
	room_list:[]
});

db.users.update(
	{_id: ObjectId("516cef0cddede7b843180de0")},
	{$push: {room_list: "1"}}
)

db.users.update(
	{_id: ObjectId("516cef0cddede7b843180de0")},
	{$pull: {room_list: "1"}}
)

db.users.save( {
	name:"Tester", 
	email:"test@test.com",
	password:"5f4dcc3b5aa765d61d8327deb882cf99",
	room_list:[]
});

db.users.find({email:"test@test.com", password:"5f4dcc3b5aa765d61d8327deb882cf99"});



/**************************************************************************************
Rooms contain documents. Question is, do we make the room contain a list of document_ids or the documents themselves 

Documents in a room should be ordered by the number of comments
Room Collection
{
	"_id" # given by mongodb
	"name" # Given by the user
	"password" # Password protected?
	"date" # creation date
	"authorized_user_ids" # List of people who can interact
	"documents" 
	[
		{
			"name" # Name of the document
			"type" # type
			"content" # content of document
			"likes" # number of likes
			"dislikes" # number of dislikes
			"report_count" # Count of reports
			"date" # creation date
			"comments" # comments by users
			[
				{
					"author" # who wrote it
					"date" # when was it written
					"author_id" # id of the author
					"content" # content of the comment
				}
			]
		}
	]
}
